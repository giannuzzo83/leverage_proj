<!DOCTYPE html>
<html lang="it">
<head>
  <meta charset="UTF-8">
  <title>Simulatore Strategie BTC</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    /* â”€â”€â”€ TradingView-style Dark Theme â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ */
    body {
      background: #0e0f14;
      color: #d1d4dc;
      font-family: 'Helvetica Neue', Arial, sans-serif;
      margin: 0; padding: 20px;
    }
    h1 {
      color: #ff9800;
      text-align: center;
      margin-bottom: 16px;
    }
    .layout {
      display: grid;
      grid-template-columns: 240px 240px 1fr;
      gap: 12px;
      max-width: 1400px;
      margin: auto;
      align-items: start;
    }
    .form, .strategies {
      background: #131722;
      padding: 12px;
      border-radius: 6px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.5);
    }
    .form h2, .strategies h2 {
      margin: 0 0 8px; font-size: 1em; color: #fff;
    }
    label {
      display: block; margin: 6px 0 2px;
      font-size: 0.85em; color: #8a8e98;
    }
    input[type="text"],
    input[type="number"],
    input[type="date"] {
      width: 100%; padding: 6px 8px;
      background: #1e2028; border: 1px solid #2a2e3b;
      border-radius: 4px; color: #e1e4eb; font-size: 0.9em;
    }
    button {
      margin-top: 10px; background: #ff9800;
      border: none; color: #131722;
      padding: 6px; width: 100%; border-radius: 4px;
      font-size: 0.9em; cursor: pointer; transition: background .2s;
    }
    button:hover { background: #ffb347; }
    .strategy-card {
      background: #1e2028; border-left: 4px solid;
      padding: 6px; margin-bottom: 6px; border-radius: 4px;
      font-size: 0.85em;
    }
    .strategy-card h4 {
      margin: 0; font-size: 0.95em; color: #fff;
    }
    .strategy-card .alloc {
      color: #8a8e98; font-size: 0.8em;
    }
    .strategy-card button {
      float: right;
      background: transparent; color: #ff4d4d;
      border: 1px solid #ff4d4d;
      padding: 2px 6px; border-radius: 4px;
      font-size: 0.75em; cursor: pointer;
    }
    .strategy-card button:hover {
      background: #ff4d4d; color: #fff;
    }
    .chart-container {
      background: #131722; padding: 12px;
      border-radius: 6px; height: 400px;
    }
    .chart-container canvas {
      background: #0e0f14; border-radius: 4px;
      display: block; height: 100% !important;
    }
    .results-table {
      background: #131722; border-radius: 6px;
      padding: 12px; margin: 16px auto 0;
      max-width: 800px;
      box-shadow: 0 2px 8px rgba(0,0,0,0.5);
      font-size: 0.85em;
    }
    .results-table h2 {
      margin: 0 0 8px; color: #fff; font-size: 1em;
    }
    .results-table .capital-input {
      margin-bottom: 8px;
      display: flex; align-items: center; gap: 8px;
      color: #8a8e98;
    }
    .results-table .capital-input input {
      width: 120px;
    }
    .results-table table {
      width: 100%; border-collapse: collapse;
    }
    .results-table th, .results-table td {
      padding: 6px 8px; text-align: left;
    }
    .results-table th {
      background: #1e2028; color: #8a8e98;
      font-weight: normal;
    }
    .results-table tr:not(:last-child) td {
      border-bottom: 1px solid #2a2e3b;
    }
  </style>
</head>
<body>
  <h1>Simulatore Strategie BTC</h1>

  <div class="layout">
    <!-- Form Nuova Strategia -->
    <div class="form">
      <h2>Nuova Strategia</h2>
      <label>Nome</label>
      <input type="text" id="name" placeholder="Es. Strategia A">
      <label>BTC Spot %</label>
      <input type="number" id="spot" value="50" min="0" max="100">
      <label>BTC Leva 2x %</label>
      <input type="number" id="lev2" value="25" min="0" max="100">
      <label>BTC Leva 3x %</label>
      <input type="number" id="lev3" value="25" min="0" max="100">
      <label>Data Inizio</label>
      <input type="date" id="startDate" placeholder="gg/mm/aaaa" onchange="renderChart()">
      <button onclick="addStrategy()">Aggiungi</button>
      <button onclick="inventaStrategia()">ðŸ§  Creativa</button>
    </div>

    <!-- Strategie Attive -->
    <div class="strategies">
      <h2>Strategie Attive</h2>
      <div id="strategyList"></div>
    </div>

    <!-- Grafico -->
    <div class="chart-container">
      <canvas id="btcChart"></canvas>
    </div>
  </div>

  <!-- Riepilogo Performance -->
  <div class="results-table">
    <h2>Riepilogo Performance</h2>
    <div class="capital-input">
      <label>Capitale Iniziale ($):</label>
      <input id="initialCapital" type="number" value="100000" onchange="renderChart()">
    </div>
    <table>
      <thead>
        <tr>
          <th>Strategia</th>
          <th>Ritorno %</th>
          <th>Max Drawdown %</th>
          <th>Valore Finale ($)</th>
          <th>Delta ($)</th>
        </tr>
      </thead>
      <tbody id="resultsBody"></tbody>
    </table>
  </div>

  <script>
    const monthNames = ["gen","feb","mar","apr","mag","giu","lug","ago","set","ott","nov","dic"];
    let strategies = [], chart, creativeCount = 0;
    const DEFAULT_START = new Date('2010-01-01').getTime();

    // Prendo TUTTI i dati da Coingecko via proxy AllOrigins
    async function fetchBTCPrices() {
      const target = encodeURIComponent(
        "https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=max&interval=daily"
      );
      const proxy = `https://api.allorigins.win/raw?url=${target}`;
      const res = await fetch(proxy);
      const json = await res.json();
      return json.prices; // [[ms, price], â€¦]
    }

    function computeReturns(prices) {
      return prices.map((p,i)=> i ? (p-prices[i-1])/prices[i-1] : 0 );
    }

    function simulateCurve(rets, alloc) {
      const curve = [100];
      for (let i=1; i<rets.length; i++){
        const r = alloc.spot*rets[i]
                + alloc.lev2*2*rets[i]
                + alloc.lev3*3*rets[i];
        curve.push(curve[i-1]*(1+r));
      }
      return curve;
    }

    function maxDrawdown(curve){
      let peak=curve[0], md=0;
      curve.forEach(v=>{
        if(v>peak) peak=v;
        const dd=(peak-v)/peak;
        if(dd>md) md=dd;
      });
      return md*100;
    }

    function updateStrategyList(){
      const c = document.getElementById("strategyList");
      c.innerHTML = "";
      strategies.forEach((s,i)=>{
        const d = document.createElement("div");
        d.className = "strategy-card";
        d.style.borderColor = s.color;
        d.innerHTML = `
          <h4>${s.name}</h4>
          <div class="alloc">
            ${(s.alloc.spot*100).toFixed(0)}% |
            ${(s.alloc.lev2*100).toFixed(0)}%Ã—2 |
            ${(s.alloc.lev3*100).toFixed(0)}%Ã—3
          </div>
          <button onclick="removeStrategy(${i})">âœ•</button>
        `;
        c.appendChild(d);
      });
    }

    function removeStrategy(i){
      strategies.splice(i,1);
      updateStrategyList();
      renderChart();
    }

    async function renderChart(){
      // 1) carico tutti i dati, 2) filtro dalla data scelta o DEFAULT_START
      const all = await fetchBTCPrices();
      const sdVal = document.getElementById("startDate").value;
      const startMs = sdVal ? new Date(sdVal).getTime() : DEFAULT_START;
      const filtered = all.filter(p=>p[0]>=startMs);

      // estraggo prezzi e label formattate
      const prices = filtered.map(p=>p[1]);
      const labels = filtered.map(p=>{
        const d = new Date(p[0]);
        const dd=String(d.getDate()).padStart(2,'0');
        const mo=monthNames[d.getMonth()];
        const yy=String(d.getFullYear()).slice(-2);
        return `${dd}/${mo}/${yy}`;
      });
      const rets = computeReturns(prices);

      // costruisco le curve
      const spotCurve = simulateCurve(rets,{spot:1,lev2:0,lev3:0});
      const datasets = [{
        label:"Spot",
        data: spotCurve,
        borderColor:"#ff9800", borderWidth:2,
        fill:false, tension:0.2, pointRadius:0
      }].concat(strategies.map(s=>({
        label: s.name,
        data: simulateCurve(rets,s.alloc),
        borderColor: s.color, borderWidth:2,
        fill:false, tension:0.2, pointRadius:0
      })));

      // distruggo vecchio e disegno nuovo
      if(chart) chart.destroy();
      chart = new Chart(
        document.getElementById("btcChart"),
        {
          type:"line",
          data:{labels,datasets},
          options:{
            responsive:true,
            maintainAspectRatio:false,
            interaction:{mode:"index",intersect:false},
            layout:{padding:{right:60}},
            scales:{
              x:{ grid:{color:"#2a2e3b"},
                  ticks:{color:"#8a8e98",maxRotation:45,minRotation:45,autoSkip:true} },
              y:{ grid:{color:"#2a2e3b"},
                  ticks:{color:"#8a8e98"} }
            },
            plugins:{
              legend:{labels:{color:"#d1d4dc"}},
              tooltip:{mode:"index",intersect:false}
            },
            elements:{point:{radius:0}}
          }
        }
      );

      // aggiorno la tabella
      const body = document.getElementById("resultsBody");
      body.innerHTML = "";
      const capital = parseFloat(document.getElementById("initialCapital").value)||100000;
      const spotRet = spotCurve.at(-1)-100;
      const spotVal = capital*(spotCurve.at(-1)/100);
      const spotDd  = maxDrawdown(spotCurve);

      // prima riga: Spot
      const rowSpot = document.createElement("tr");
      rowSpot.innerHTML=`
        <td style="color:#ff9800">Spot</td>
        <td>${spotRet.toFixed(1)}%</td>
        <td>${spotDd.toFixed(1)}%</td>
        <td>$${spotVal.toLocaleString()}</td>
        <td>$0</td>
      `;
      body.appendChild(rowSpot);

      // righe strategie
      datasets.slice(1).forEach(ds=>{
        const curve = ds.data;
        const ret   = curve.at(-1)-100;
        const dd    = maxDrawdown(curve);
        const val   = capital*(curve.at(-1)/100);
        const delta = val - spotVal;
        const r = document.createElement("tr");
        r.innerHTML = `
          <td style="color:${ds.borderColor}">${ds.label}</td>
          <td>${ret.toFixed(1)}%</td>
          <td>${dd.toFixed(1)}%</td>
          <td>$${val.toLocaleString()}</td>
          <td>$${delta.toLocaleString()}</td>
        `;
        body.appendChild(r);
      });
    }

    function addStrategy(){
      const name = document.getElementById("name").value.trim();
      const spot = +document.getElementById("spot").value/100;
      const lev2 = +document.getElementById("lev2").value/100;
      const lev3 = +document.getElementById("lev3").value/100;
      if(!name) return alert("Inserisci un nome");
      if(Math.abs(spot+lev2+lev3-1)>0.01)
        return alert("La somma deve essere 100%");
      strategies.push({
        name,
        alloc:{spot,lev2,lev3},
        color:`hsl(${Math.random()*360},70%,60%)`
      });
      updateStrategyList();
      renderChart();
    }

    function inventaStrategia(){
      creativeCount++;
      const name = `Creativa #${creativeCount}`;
      let [a,b,c] = [Math.random(),Math.random(),Math.random()];
      const s = a+b+c; a/=s; b/=s; c/=s;
      strategies.push({
        name,
        alloc:{spot:a,lev2:b,lev3:c},
        color:`hsl(${Math.random()*360},70%,60%)`
      });
      updateStrategyList();
      renderChart();
    }

    // eseguo subito al caricamento
    document.addEventListener('DOMContentLoaded', renderChart);
  </script>
</body>
</html>
